{
  "genesys_guardrails": {
    "cli_groups": {
      "node": {
        "commands": [
          { "name": "list", "ros_equiv": "ros2 node list", "impl": "main.py > @cli.group() node:list" },
          { "name": "info", "ros_equiv": "ros2 node info <node>", "impl": "main.py > node:info" }
        ]
      },
      "topic": {
        "commands": [
          { "name": "list", "ros_equiv": "ros2 topic list", "impl": "main.py > topic:list" },
          { "name": "info", "ros_equiv": "ros2 topic info <topic>", "impl": "main.py > topic:info" },
          { "name": "echo", "ros_equiv": "ros2 topic echo <topic>", "impl": "main.py > topic:echo" },
          { "name": "pub", "ros_equiv": "ros2 topic pub <topic> <msg_type> <args>", "impl": "main.py > topic:pub" },
          { "name": "bw", "ros_equiv": "ros2 topic bw <topic>", "impl": "main.py > topic:bw" },
          { "name": "find", "ros_equiv": "ros2 topic find <msg_type>", "impl": "main.py > topic:find" }
        ]
      },
      "service": {
        "commands": [
          { "name": "list", "ros_equiv": "ros2 service list", "impl": "main.py > service:list" },
          { "name": "type", "ros_equiv": "ros2 service type <srv>", "impl": "main.py > service:type" },
          { "name": "info", "ros_equiv": "ros2 service info <srv>", "impl": "main.py > service:info" },
          { "name": "find", "ros_equiv": "ros2 service find <srv_type>", "impl": "main.py > service:find" },
          { "name": "call", "ros_equiv": "ros2 service call <srv> <srv_type> <args>", "impl": "main.py > service:call" },
          { "name": "echo", "ros_equiv": "ros2 service echo <srv>", "impl": "main.py > service:echo" }
        ]
      },
      "action": {
        "commands": [
          { "name": "list", "ros_equiv": "ros2 action list", "impl": "main.py > action:list" },
          { "name": "type", "ros_equiv": "ros2 action type <action>", "impl": "main.py > action:type" },
          { "name": "info", "ros_equiv": "ros2 action info <action>", "impl": "main.py > action:info" },
          { "name": "send_goal", "ros_equiv": "ros2 action send_goal <action> <args>", "impl": "main.py > action:send_goal" },
          { "name": "echo", "ros_equiv": "ros2 action echo <action>", "impl": "main.py > action:echo" }
        ]
      },
      "param": {
        "commands": [
          { "name": "list", "ros_equiv": "ros2 param list", "impl": "main.py > param:list" },
          { "name": "get", "ros_equiv": "ros2 param get <node> <param>", "impl": "main.py > param:get" },
          { "name": "set", "ros_equiv": "ros2 param set <node> <param> <value>", "impl": "main.py > param:set" },
          { "name": "dump", "ros_equiv": "ros2 param dump <node>", "impl": "main.py > param:dump" },
          { "name": "load", "ros_equiv": "ros2 param load <node> <file>", "impl": "main.py > param:load" }
        ]
      }
    },
    "decorators": {
      "python": {
        "@service": {
          "purpose": "Registers service server, injects request/response",
          "impl": "decorators.py > add to _initialize_communications"
        },
        "@action_server": {
          "purpose": "Registers action server, supports feedback/result",
          "impl": "decorators.py > new action handling logic"
        },
        "@action_client": {
          "purpose": "Registers action client with send_goal + feedback cb",
          "impl": "decorators.py > new client handling logic"
        },
        "@lifecycle_node": {
          "purpose": "Explicit decorator for lifecycle nodes (alternative to auto-detect)",
          "impl": "decorators.py > wrap user class with LifecycleNode"
        }
      }
    },
    "scaffolding": {
      "node_creation": {
        "feature": "Interactive node type selection",
        "impl": "main.py > make:node",
        "options": ["Publisher", "Subscriber", "Service", "ActionServer", "Lifecycle"]
      },
      "interface_creation": {
        "feature": "Scaffold custom msg/srv/action files",
        "impl": "main.py > new command make:interface",
        "details": [
          "Place .msg/.srv/.action files under src/<pkg>/msg|srv|action/",
          "Update package.xml with <build_depend> message_generation </build_depend>",
          "Update CMakeLists.txt with rosidl_generate_interfaces()"
        ]
      }
    },
    "tooling": {
      "rosdep": {
        "feature": "Genesys doctor should check for missing dependencies",
        "impl": "main.py > doctor",
        "ros_equiv": "rosdep install --from-paths src -y"
      },
      "rqt": {
        "feature": "Awareness of rqt_console and rqt_graph",
        "impl": "main.py > new command genesys rqt:console / rqt:graph"
      },
      "debug": {
        "feature": "Record/replay topics",
        "impl": "main.py > new commands topic:record, topic:replay",
        "ros_equiv": "ros2 bag record / ros2 bag play"
      }
    },
    "remapping": {
      "feature": "Simplify remap syntax for run/launch",
      "impl": "main.py > run and launch commands",
      "example": "genesys run talker --remap chatter:=/new_chatter"
    }
  }
}
