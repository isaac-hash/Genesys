{
  "decorator_improvements": {
    "parameter": {
      "current": "Declares parameters via class attribute placeholders, resolved in @node init.",
      "improvements": [
        "Auto-load parameter defaults from /config/<package>.yaml if present.",
        "Support parameter type hints (int, float, str, bool, list) to enforce typing.",
        "Allow dynamic reconfigure: update user_instance attributes if parameter changes at runtime."
      ]
    },
    "publisher": {
      "current": "Publishes the decorated method's return value to one or more topics.",
      "improvements": [
        "Allow multiple publishers per method (e.g., publish to /scan and /debug).",
        "Add QoS profiles (RELIABLE, BEST_EFFORT, KEEP_LAST, KEEP_ALL) as enums.",
        "Enable async publishing (fire-and-forget) vs sync publishing (wait for subscribers)."
      ]
    },
    "subscriber": {
      "current": "Registers a method as a subscriber callback for a topic.",
      "improvements": [
        "Support multiple subscribers per method.",
        "Auto-log message type + topic for debugging when callback is triggered.",
        "Optional message filtering (e.g., throttle, queue size, content filters)."
      ]
    },
    "timer": {
      "current": "Registers a method to run on a timer with given period.",
      "improvements": [
        "Support multiple timers on the same class with unique names.",
        "Add cron-like scheduling (e.g., every 5s, at 10Hz).",
        "Optionally sync timer with ROS 2 simulation clock (use_sim_time)."
      ]
    },
    "node": {
      "current": "Wraps a user class into a ROS 2 node, handling init, params, publishers, subscribers, timers.",
      "improvements": [
        "Add lifecycle awareness (configure/activate/deactivate/shutdown hooks).",
        "Support context manager for safe spin/shutdown (`with node:` pattern).",
        "Auto-generate default launch + config files when node is created.",
        "Inject rclpy context (e.g., executors, callback groups) via decorator options."
      ]
    },
    "general": {
      "current": "Decorators abstract ROS 2 boilerplate into simple annotations.",
      "improvements": [
        "Support async/await in callbacks for integration with asyncio.",
        "Add introspection API: list all publishers/subscribers/timers of a node at runtime.",
        "Enable hot-reload in simulation mode: restart decorated nodes without restart of rclpy.",
        "Consistency: Ensure decorators behave the same across Python (decorators) and C++ (macros)."
      ]
    }
  },
  "design_goal": "Reduce boilerplate further, add dynamic runtime features, and bring advanced ROS 2 capabilities (QoS, lifecycle, reconfigure) into the decorator layer without exposing raw rclpy APIs."
}
